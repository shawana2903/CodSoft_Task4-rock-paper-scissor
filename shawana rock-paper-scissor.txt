import random
import ipywidgets as widgets
from IPython.display import display, clear_output

# Define choices
choices = {'r': 'rock', 'p': 'paper', 's': 'scissors'}
full_choices = ['rock', 'paper', 'scissors']

# Initialize global variables for leaderboard and game stats
leaderboard = {}
game_stats = {"total_games": 0, "user_wins": 0, "computer_wins": 0, "ties": 0}
game_history = []  # To store history of each round
previous_user_choice = None  # Initialize previous user choice

# Function to determine the winner
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "Computer wins!"

# Function for computer choice
def get_computer_choice(previous_user_choice=None):
    return random.choice(full_choices)

# Function to display game stats
def display_stats():
    print(f"Game Stats: {game_stats}")
    print("Game History:")
    for entry in game_history:
        print(entry)

# Function to handle game play
def play_game(user_choice):
    global previous_user_choice
    
    computer_choice_result = get_computer_choice(previous_user_choice)
    result = determine_winner(user_choice, computer_choice_result)
    
    # Update game stats
    game_stats["total_games"] += 1
    if result == "You win!":
        game_stats["user_wins"] += 1
    elif result == "Computer wins!":
        game_stats["computer_wins"] += 1
    else:
        game_stats["ties"] += 1
    
    # Record history
    game_history.append(f"Round {game_stats['total_games']}: You chose {user_choice}, Computer chose {computer_choice_result} - {result}")
    
    # Update previous user choice
    previous_user_choice = user_choice
    
    # Display results and stats
    output.clear_output()
    with output:
        print(f"Computer chose: {computer_choice_result}")
        print(result)
        display_stats()

# Widgets for buttons
button_rock = widgets.Button(description='Rock')
button_paper = widgets.Button(description='Paper')
button_scissors = widgets.Button(description='Scissors')

# Output display
output = widgets.Output()

# Button click handlers
button_rock.on_click(lambda b: play_game('rock'))
button_paper.on_click(lambda b: play_game('paper'))
button_scissors.on_click(lambda b: play_game('scissors'))

# Display the buttons and output area
display(widgets.HBox([button_rock, button_paper, button_scissors]))
display(output)